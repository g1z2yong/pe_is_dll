#include <stdio.h>
#include <stdlib.h>
#include <windows.h>

long filesize(FILE *pFile)
{
 long lSize;
 fseek (pFile , 0 , SEEK_END);
 lSize=ftell (pFile);
 rewind (pFile);
 return lSize;
}
         
int main(int argc, char *argv[])
{
  IMAGE_DOS_HEADER myDosHeader;
  IMAGE_OPTIONAL_HEADER myOptionalHeader;
  IMAGE_FILE_HEADER myFileHeader;
  IMAGE_NT_HEADERS	 stPEHeader;
  DWORD petag;
  WORD dlltag,systag,t;
  LONG e_lfanew;
  FILE *pFile,*pMain,*pOverlay;
  if(!(pFile = fopen(argv[1], "rb")))
  {
           printf ("error: File Not Found\n");
           return 0;
           }

  fread(&myDosHeader, sizeof(IMAGE_DOS_HEADER), 1, pFile);
  if(myDosHeader.e_magic!=IMAGE_DOS_SIGNATURE)
  {
   printf("error: not a MZ\n");                                            
   return 0;
   }else
   {
  e_lfanew = myDosHeader.e_lfanew;
}
   fseek(pFile,e_lfanew,SEEK_SET);
   fread(&petag,sizeof(DWORD),1,pFile);
   if(petag!=IMAGE_NT_SIGNATURE)//"PE\0\0"
  {
     printf("error: not a PE\n");
    return;
  }else
  {
    //printf("PE ok\n");
  }


    fseek(pFile, (e_lfanew + sizeof(DWORD)), SEEK_SET);
    fread(&myFileHeader, sizeof(IMAGE_FILE_HEADER), 1, pFile);
    
    dlltag=myFileHeader.Characteristics;
    
    fseek(pFile, (e_lfanew + sizeof(DWORD) + sizeof(IMAGE_FILE_HEADER)), SEEK_SET);     // 如此定位的原因请参考PE文件结构图
    fread(&myOptionalHeader, sizeof(IMAGE_OPTIONAL_HEADER), 1, pFile);

    systag=myOptionalHeader.Subsystem;

    //printf("%04x\n",myFileHeader.Characteristics);
    //printf("%04x\n",myOptionalHeader.Subsystem);
    
    t=dlltag&0xF000;
    //printf("%04x\n",t);
    if(systag==1)
    {
      printf("system file\n");
    }
    if(t==0x2000)
    {
      printf("dll file\n");
    }

  fclose(pFile);
  return 0;
}
